1) log into c.5 AWS EC2 instance


2) install following software (if you have a software compatibility, then check against my package.json and install to the specific version on this repository for a quick resolution)

sudo apt-get update
# unlike windows I could not successfully use a later version of node
## deprecated    curl -sL https://deb.nodesource.com/setup_14.x -o nodesource_setup.sh
curl -sL https://deb.nodesource.com/setup_20.x -o nodesource_setup.sh
sudo bash nodesource_setup.sh
sudo apt install nodejs build-essential
npm install --save-dev @nomiclabs/hardhat-ethers ethers @nomiclabs/hardhat-waffle ethereum-waffle chai
npm i @aave/core-v3  dotenv

mkdir flashloan
cd flashloan
npx hardhat





3.) Obtain the private key from your account that you are going to use sepolia ethernet

https://sepoliafaucet.com/

bug i experienced with metamask version: 
https://www.reddit.com/r/Metamask/comments/1553ymi/copying_wallet_address_nothing_shows_up_when_i/
(using windows key  + v   will post the contract address! )


best faucet!
https://sepolia-faucet.pk910.de/
second best:
https://sepoliafaucet.com/


4.) Obtain your sepolia endpoint from infura ( or similar provider ) 

https://www.infura.io/


5.) Obtain AAVE address information ( provided below - though it could change )

https://docs.aave.com/developers/deployed-contracts/v3-testnet-addresses

PoolAddressesProvider-Aave
0x0496275d34753A48320CA58103d5220d394FF77F

USDC-TestnetMintableERC20-Aave
0xda9d4f9b69ac6C22e444eD9aF0CfC043b7a7f53f


6.) set up hardhat configuration file

NOTE: you will have to add your personal infura address and your private key of your account ( protect this )

url:   <infura API for sepolia testnet>
accounts: "<metamask private key for your account that is to be connected via metamask and have connected>"


0
7.) set up the contract

pragma solidity 0.8.10;

import {FlashLoanSimpleReceiverBase} from "@aave/core-v3/contracts/flashloan/base/FlashLoanSimpleReceiverBase.sol";
import {IPoolAddressesProvider} from "@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol";
import {IERC20} from "@aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol";





contract FlashLoan is FlashLoanSimpleReceiverBase {
    address payable owner;

    constructor(address _addressProvider)
        FlashLoanSimpleReceiverBase(IPoolAddressesProvider(_addressProvider))
    {
        owner = payable(msg.sender);
    }

    /**
        This function is called after your contract has received the flash loaned amount
     */
    function executeOperation(
        address asset,
        uint256 amount,
        uint256 premium,
        address initiator,
        bytes calldata params
    ) external override returns (bool) {
        //
        // This contract now has the funds requested.
        // Your logic goes here.
        //

        // At the end of your logic above, this contract owes
        // the flashloaned amount + premiums.
        // Therefore ensure your contract has enough to repay
        // these amounts.

        // Approve the Pool contract allowance to *pull* the owed amount
        uint256 amountOwed = amount + premium;
        IERC20(asset).approve(address(POOL), amountOwed);

        return true;
    }

    function requestFlashLoan(address _token, uint256 _amount) public {
        address receiverAddress = address(this);
        address asset = _token;
        uint256 amount = _amount;
        bytes memory params = "";
        uint16 referralCode = 0;

        POOL.flashLoanSimple(
            receiverAddress,
            asset,
            amount,
            params,
            referralCode
        );
    }

    function getBalance(address _tokenAddress) external view returns (uint256) {
        return IERC20(_tokenAddress).balanceOf(address(this));
    }

    function withdraw(address _tokenAddress) external onlyOwner {
        IERC20 token = IERC20(_tokenAddress);
        token.transfer(msg.sender, token.balanceOf(address(this)));
    }

    modifier onlyOwner() {
        require(
            msg.sender == owner,
            "Only the contract owner can call this function"
        );
        _;
    }

    receive() external payable {}
}


7.5)  note: I did not run a separate hardhat "node" command - as we are referencing the sepolia remote testnet


8.) set up USDC for fees

https://staging.aave.com/faucet/

https://chaindrop.org/?chainid=11155111&token=0x6f14c02fc1f78322cfd7d707ab90f18bad3b54f5

if it is not recognized by metamask - you may have to import the USDC token under sepolia with the Sepolia USDC contract address: 

https://sepolia.etherscan.io/token/0x51fce89b9f6d4c530698f181167043e1bb4abf89

9.)



npx hardhat console --network sepolia



> const hre = require("hardhat");
undefined

# I am going to reference the private address specified in my hardhat config file for the deployment fees


> const deployedContract = await hre.ethers.deployContract("FlashLoan",["0x0496275d34753A48320CA58103d5220d394FF77F"]);
undefined
> let dp = await deployedContract.getAddress()
undefined


>const tokenEURS = await ethers.getContractAt("IERC20", "0x8D5C78B896d69d68F6F9C984702c170293428701" )

> await token.balanceOf(dp)
0n
>
I then manually 'send' my token amount directlty to 'dp' ( the deployed contract address )


# in this case I am going to request an amount in EURS ( I am going to assume six places conversion
>const tx = await deployedContract.requestFlashLoan('0xe20cf465a163c395e7Dde1466Cdd1aBe695B4658',1000)




## from sepolia etherscan io: 
Transaction Hash:
0x81c3e398a3ff0d2e47943f673f25c04a581aa61f25ba569f1ba1287a7ac46f45 
Status:
Success
Block:
4159149
1 Block Confirmation
Timestamp:
34 secs ago (Aug-25-2023 05:33:00 PM +UTC)
From:
0x8c281eE5Fb76baf098EAde89D4e66703a59a2d11
Interacted With (To):
 0x5a12e71E99EEE2AF1cE9DBe0D0f67AA0Df5C4DA4
ERC-20 Tokens Transferred: 2
From
0x0C4b9F...3dC3CfD7
To
0x5a12e7...Df5C4DA4
For
10

EURS...
(EURS...)
From
0x5a12e7...Df5C4DA4
To
0x0C4b9F...3dC3CfD7
For
10.01

EURS...
(EURS...)




REVIEW : 
money spent:
1.) deployment of flash loan contract: sepolia test ethereum ( i identified this through the hardhat config )
2.) transfer of my designated token to cover the 'premium' of the loan 
in my case I used EURS and I needed some sepolia ethereum to cover the 'send' to the contract
3.) the amount from the deployed contract as the premium (in this particular the token) 
