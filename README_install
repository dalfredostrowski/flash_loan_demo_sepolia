1) log into c.5 AWS EC2 instance


2) install following software (if you have a software compatibility, then check against my package.json and install to the specific version on this repository for a quick resolution)

sudo apt-get update
# unlike windows I could not successfully use a later version of node
## deprecated    curl -sL https://deb.nodesource.com/setup_14.x -o nodesource_setup.sh
curl -sL https://deb.nodesource.com/setup_18.x -o nodesource_setup.sh



sudo bash nodesource_setup.sh
sudo apt install nodejs build-essential
npm install --save-dev @nomiclabs/hardhat-ethers ethers @nomiclabs/hardhat-waffle ethereum-waffle chai
npm i @aave/core-v3  dotenv

mkdir flashloan
cd flashloan
npx hardhat





3.) Obtain the private key from your account that you are going to use sepolia ethernet

https://sepoliafaucet.com/

bug i experienced with metamask version: 
https://www.reddit.com/r/Metamask/comments/1553ymi/copying_wallet_address_nothing_shows_up_when_i/
(using windows key  + v   will post the contract address! )


best faucet!
https://sepolia-faucet.pk910.de/
second best:
https://sepoliafaucet.com/


4.) Obtain your sepolia endpoint from infura ( or similar provider ) 

https://www.infura.io/


5.) Obtain AAVE address information ( provided below - though it could change )

https://docs.aave.com/developers/deployed-contracts/v3-testnet-addresses

PoolAddressesProvider-Aave
0x0496275d34753A48320CA58103d5220d394FF77F

USDC-TestnetMintableERC20-Aave
0xda9d4f9b69ac6C22e444eD9aF0CfC043b7a7f53f


6.) set up hardhat configuration file

NOTE: you will have to add your personal infura address and your private key of your account ( protect this )

url:   <infura API for sepolia testnet>
accounts: "<metamask private key for your account that is to be connected via metamask and have connected>"


require("@nomicfoundation/hardhat-toolbox");
require("dotenv").config();

/** @type import('hardhat/config').HardhatUserConfig */
module.exports = {
  solidity: "0.8.10",.0
  networks: {
    sepolia: {
      url: "https://sepolia.infura.io/v3/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
      accounts: ["xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"],
    },
  },
};

7.) set up the contract

pragma solidity 0.8.10;

import {FlashLoanSimpleReceiverBase} from "@aave/core-v3/contracts/flashloan/base/FlashLoanSimpleReceiverBase.sol";
import {IPoolAddressesProvider} from "@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol";
import {IERC20} from "@aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol";





contract FlashLoan is FlashLoanSimpleReceiverBase {
    address payable owner;

    constructor(address _addressProvider)
        FlashLoanSimpleReceiverBase(IPoolAddressesProvider(_addressProvider))
    {
        owner = payable(msg.sender);
    }

    /**
        This function is called after your contract has received the flash loaned amount
     */
    function executeOperation(
        address asset,
        uint256 amount,
        uint256 premium,
        address initiator,
        bytes calldata params
    ) external override returns (bool) {
        //
        // This contract now has the funds requested.
        // Your logic goes here.
        //

        // At the end of your logic above, this contract owes
        // the flashloaned amount + premiums.
        // Therefore ensure your contract has enough to repay
        // these amounts.

        // Approve the Pool contract allowance to *pull* the owed amount
        uint256 amountOwed = amount + premium;
        IERC20(asset).approve(address(POOL), amountOwed);

        return true;
    }

    function requestFlashLoan(address _token, uint256 _amount) public {
        address receiverAddress = address(this);
        address asset = _token;
        uint256 amount = _amount;
        bytes memory params = "";
        uint16 referralCode = 0;

        POOL.flashLoanSimple(
            receiverAddress,
            asset,
            amount,
            params,
            referralCode
        );
    }

    function getBalance(address _tokenAddress) external view returns (uint256) {
        return IERC20(_tokenAddress).balanceOf(address(this));
    }

    function withdraw(address _tokenAddress) external onlyOwner {
        IERC20 token = IERC20(_tokenAddress);
        token.transfer(msg.sender, token.balanceOf(address(this)));
    }

    modifier onlyOwner() {
        require(
            msg.sender == owner,
            "Only the contract owner can call this function"
        );
        _;
    }

    receive() external payable {}
}


7.5)  note: I did not run a separate hardhat "node" command - as we are referencing the sepolia remote testnet


8.) set up USDC for fees

https://staging.aave.com/faucet/

https://chaindrop.org/?chainid=11155111&token=0x6f14c02fc1f78322cfd7d707ab90f18bad3b54f5

if it is not recognized by metamask - you may have to import the USDC token under sepolia with the Sepolia USDC contract address: 

https://sepolia.etherscan.io/token/0x51fce89b9f6d4c530698f181167043e1bb4abf89

9.)



npx hardhat console --network sepolia



> const hre = require("hardhat");
undefined
> const deployedContract = await hre.ethers.deployContract("FlashLoan",["0x0496275d34753A48320CA58103d5220d394FF77F"]);
undefined
> let dp = await deployedContract.getAddress()
undefined



> const tokenEURS = await ethers.getContractAt("IERC20", "0x8D5C78B896d69d68F6F9C984702c170293428701" )
> const token = await ethers.getContractAt("IERC20", "0x82fb927676b53b6eE07904780c7be9b4B50dB80b" )
undefined
> await token.balanceOf(dp)
0n
>
I then manually 'send' my token amount directlty to 'dp' ( the deployed contract address )

Then I specify the token address in the flash loan request.  ( from the address ) ff3 is actually the USDC, so my
best example is DAI












>const hre = require("hardhat");
>const deployedContract = await hre.ethers.deployContract("FlashLoan",["0x0496275d34753A48320CA58103d5220d394FF77F"]);
#######>await deployedContract.waitForDeployment();
>let dp = await deployedContract.getAddress()
#aUSDC
>const token = await ethers.getContractAt("IERC20", "0x55D45c6649a0Ff74097d66aa6A6ae18a66Bb2fF3" )
>await token.balanceOf(dp)






### the address input is the LENDING POOL not your contract address - so do not confuse (AAVE address - see earlier link) 
>await deployedContract.requestFlashLoan('0xda9d4f9b69ac6C22e444eD9aF0CfC043b7a7f53f',919)



OR deploy from a script 
9a.) set up deployment script


const hre = require("hardhat");

async function main() {
// contract address is from the aave site "
//  const flashLoan = await FlashLoan.deploy(
 //   "<pool provider>"
//  )
 const deployedContract = await hre.ethers.deployContract("FlashLoan",["0x0496275d34753A48320CA58103d5220d394FF77F"]);
 await deployedContract.waitForDeployment();
 console.log("SimpleStorage Contract Address:", await deployedContract.getAddress())
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});

or run it directly from the 


>  const deployedContract = await ethers.deployContract("FlashLoan",["0x0496275d34753A48320CA58103d5220d394FF77F"]);
> await deployedContract.waitForDeployment();
> await deployedContract.getAddress()
'0xDAFDF7E0b925F886e084f00807652eD21Bdb47bA'

10.) test out the balance before and after from command console.
>  const signers = await ethers.getSigners();
undefined
> const contract =  await ethers.getContractFactory("FlashLoan")
undefined
const cd2 = await contract.deploy("0x0496275d34753A48320CA58103d5220d394FF77F")



>const bal = await ethers.provider.getBalance(signers[0])
> const bal2 = await ethers.provider.getBalance(signers[0])

#### grab the contract address....



11.) perform deployment to sepolia

npx hardhat run --network sepolia scripts/deploy.js




12.) 

npx hardhat console --network sepolia
Welcome to Node.js v14.21.3.
Type ".help" for more information.
> const contractArtifact = await ethers.getContractFactory("FlashLoan");
undefined
0x8c281eE5Fb76baf098EAde89D4e66703a59a2d11

### input parameter is the contract number from the deploy
> const contract = await contract.attach("0x84A5A054abcf1db6D02f5029e070A744d6bEBfa5");
0

> const result3 = await contract.requestFlashLoan('0xda9d4f9b69ac6C22e444eD9aF0CfC043b7a7f53f',99)

then obtain the transaction address and input into etherscan....(sepolia)

https://sepolia.etherscan.io/tx/0x33bea962af1ab968753dc361ed73f133bc219e73637a2bdca2a5c964a10d9367
0x7fa2186037758f6c6ed08b16527cac5f0ec84b8cea46628629da09b420140dd2
